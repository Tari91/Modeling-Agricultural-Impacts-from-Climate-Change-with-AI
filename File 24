import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# 1. Generate Synthetic Data
def generate_synthetic_data(n_samples=1000, seed=42):
    np.random.seed(seed)
    # Climate features
    temperature = np.random.normal(loc=25, scale=5, size=n_samples)  # Celsius
    rainfall = np.random.normal(loc=800, scale=150, size=n_samples)  # mm/year
    co2 = np.random.normal(loc=400, scale=20, size=n_samples)        # ppm
    humidity = np.random.normal(loc=70, scale=10, size=n_samples)    # percent

    # Simulate crop yield: simple nonlinear function
    crop_yield = (
        2.5 * temperature
        + 0.03 * rainfall
        + 0.1 * co2
        - 0.8 * humidity
        + np.random.normal(0, 10, n_samples)  # noise
    )

    data = pd.DataFrame({
        'Temperature': temperature,
        'Rainfall': rainfall,
        'CO2': co2,
        'Humidity': humidity,
        'CropYield': crop_yield
    })
    return data

# 2. Create and visualize dataset
data = generate_synthetic_data()
print(data.head())

sns.pairplot(data)
plt.suptitle("Synthetic Climate and Crop Yield Data", y=1.02)
plt.show()

# 3. Preprocessing
X = data.drop(columns=['CropYield'])
y = data['CropYield']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. Train Model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# 5. Evaluate Model
y_pred = model.predict(X_test)

rmse = mean_squared_error(y_test, y_pred, squared=False)
r2 = r2_score(y_test, y_pred)

print(f"RMSE: {rmse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# 6. Visualize Predictions
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.7, edgecolor='k')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel("Actual Crop Yield")
plt.ylabel("Predicted Crop Yield")
plt.title("Actual vs Predicted Crop Yield")
plt.grid(True)
plt.show()

# 7. Feature Importance
importances = model.feature_importances_
features = X.columns
importance_df = pd.DataFrame({'Feature': features, 'Importance': importances})
importance_df = importance_df.sort_values(by='Importance', ascending=False)

sns.barplot(x='Importance', y='Feature', data=importance_df)
plt.title("Feature Importance")
plt.show()
